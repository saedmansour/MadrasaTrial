@model Madrasa.Models.Question

@{
    ViewBag.Title = "AddQuestion";
}




@*
*@

<script type="text/javascript">
    var mainDivName = "AddQuestionDiv";
    var InputDiv = "InputDiv";
    var subjectIdInput = "subjectId";
    var DefaultString = "General";
    var Model = @Html.Raw(Json.Encode(ViewBag.subjects));
</script>

@* Function for adding radio button
*@
<script  type="text/javascript">
    /*
    * add space according to the level and new line if get true in the second parameter
    */
    function newLineAndSace(depth, ToAddNewLine) {
        var str = "";
        if (ToAddNewLine == true) {
            str = "<br/>";
        }
        //no reason for choose 3
        for (var i = 0; i < depth * 3; i++) {
            str += "&nbsp";
        }
        return str;
    }
    /* 
    * check if 2 list are equals , return true (1)
    */
    function isEqual(arr1, arr2) {
        if (arr1.length != arr2.length) {
            return false;
        }
        for (var i = 0; i < arr1.length; i++) {
            if (arr1[i] != arr2[i]) {
                return false;
            }
        }
        return true;
    }
    /* 
    *  Event when subject radio clicked
    */
    function copyArray(arrSource, arrDestenation) {
        for (var i = 0; i < arrSource.length; i++) {
            arrDestenation.push(arrSource[i]);
        }
    }
    /* 
    *  Event when subject radio clicked
    *      create list of the checked subject and call addExistSubject
    */
    function EventClickedSubject(id) {
        if (id == null) {
            addExistSubject(mainDivName, [], null);
            return;
        }
        //add input ID
        document.getElementById(subjectIdInput).value=id;
        for (var i = 0; i < Model.length; i++) {
            if (Model[i].id == id) {
                var subjectList = [];
                //create array of the pressed subject
                copyArray(Model[i].ancestorIdList, subjectList);
                subjectList.push(Model[i].id);
                //create the radios
                addExistSubject(mainDivName, subjectList, Model[i].id);
            }
        }
    }
    /* 
    *  add radio for div with groupName and text beside and  ID of checked Subject
    */
    function addRadio(divPtr, group, text, id, checked) {
        var addChecked = "checked";
        if (checked == false) {
            addChecked = "";
        }
        divPtr.innerHTML += '<input type="radio"  onclick=EventClickedSubject(' + id + ') name="' + group + '"' + addChecked + '/>' + text;
    }
    /* 
    *  add next Level of the subjects
    *  GET the ID that need to mark it as checked.
    */
    function addNextSubjectLevelRadios(divPtr, subjectList, depth, idNeedToCheck) {
        ////add new line and space for new level if its not first stage
        if (depth != 0) {
            divPtr.innerHTML += newLineAndSace(depth, true);
        }
        for (var j = 0; j < Model.length; j++) {
            // print the stage by compare the sufix of IDLIST
            if (isEqual(Model[j].ancestorIdList, subjectList)) {
                var checked = false;
                if (Model[j].id == idNeedToCheck) {
                    checked = true;
                }
                addRadio(divPtr, "group" + depth, Model[j].title, Model[j].id, checked);
            }
        }
    }
    /* Main Function.
    * add radio for the existing subject
    */
    function addExistSubject(div, idsList, id) {
        var divPtr = document.getElementById(div);
        divPtr.innerHTML = "";
        var subjectList = [];
        //add the the next level stage 
        for (var i = 0; i < idsList.length + 1; i++) {
            var subjectIdToCheck = "";
            if (i < idsList.length) {
                subjectIdToCheck = idsList[i];
            }
            //add next level and mark subjectIDToCheck as checked.
            addNextSubjectLevelRadios(divPtr, subjectList, i, subjectIdToCheck);
            //add radio for back , not include first level and last level
            if (i != idsList.length && i!=0) {
                var ancestorIdList = (i == 0) ? null : subjectList[subjectList.length - 1];
                addRadio(divPtr, "group" + i, DefaultString, ancestorIdList, false);
            }
            //create next level list father
            subjectList.push(idsList[i]);
        }
    }
</script>

<script type="text/javascript">
     /* EVENT for create textBox after getting number of required textbox*/
    var answerBaseId = "availableAnswerBaseId";
    var imageBaseId = "imageBaseId";
    var videoBaseId = "videoBaseId";

    function textBoxEvent(textBoxId, tdId,idBase) {
        var maxTextInLine=5;
        var value = document.getElementById(textBoxId).value;
        var td = document.getElementById(tdId);
        td.innerHTML = "";
        for (var i = 0; i < value; i++) {
            if (i + 1 % maxTextInLine == 0) {
                td.innerHTML += "<br/>";
            }
            td.innerHTML += (i+1)+'. <input type="text" id="'+idBase+i+'" /> ';
        }
    }
    /*Event to encode the avilable answers , imageUrls and VideoUrls*/
    function submitEvent(answersId,imagesId,videoId) {
        //get number of boxes
        var answersNumber = document.getElementById(answersId).value;
        //var imagesNumber = document.getElementById(imagesId).value;
        //var videosNumber = document.getElementById(videoId).value;
        //build arrays for encode function
        var numberOfBoxes = [answersNumber, [], []];
        var baseIds = [answerBaseId,imageBaseId,videoBaseId];
        var names = ["answerJsonArray", "imagesUrl", "videosUrl"];
        //call function to encode
        encodeTextBoxes(numberOfBoxes, baseIds, names);
    }

    /* merege textboxes with the same baseId*/
    function encodeTextBoxes(numberOfBoxes, baseIds, names) {
        var div = document.getElementById(InputDiv);
        var j = 0;
        var textlist = [];
        // create list of the elements and merge them by json
        for (var i = 0; i < numberOfBoxes[j]; i++) {
            var currentValue = document.getElementById(baseIds[j] + i).value;
            textlist.push(currentValue);
        }
        var result = json_encode(textlist);
        document.getElementById(names[j]).value = result;
    }

</script>


<script>
    //Event when user checked
    function eventChoosedData(id, inputId) {
        var input = document.getElementById(inputId);
        input.value = id.value;
    }
</script>
@*
*@
<div style="direction: ltr">
    <h2>AddQuestion</h2>
    @using (Html.BeginForm())
    {
    
        <div id="InputDiv">
            <input type="hidden" name="subjectId" id="subjectId" value="" />
            <input type="hidden" name="answerJsonArray" id="answerJsonArray" value="" />
            <input type="hidden" name="imagesUrl" id="imagesUrl" value="" />
            <input type="hidden" name="videosUrl" id="videosUrl" value="" />
            <input  type="hidden" name="level" id="level" value="@ViewBag.defaultLevel" />
        </div>
        <table>
            <tr>
                <td>Choose Subject:</td>
                <td><div id="AddQuestionDiv"></div></td>
            
            </tr>
            <tr>
                <td>Choose Level:</td>
                <td> @Html.DropDownList("levels", (SelectList)ViewBag.levels, new { onchange = "eventChoosedData(this,'level')" })</td>
            
            </tr>
            <tr>
                <td> @Html.LabelFor(model => model.questionHtml)  </td>
                <td> @Html.EditorFor(model => model.questionHtml)</td>
            </tr>
            <tr>
                <td>  Insert number of avaliable answers </td>
                <td>  <input id="answersNumberId" value="0" type="text" onkeyup="textBoxEvent('answersNumberId','answerJsonArrayTdId',answerBaseId)" /> </td>
           
            </tr>
            <tr>
                <td></td>
                <td id="answerJsonArrayTdId"></td>
            </tr>
            <tr>
                <td> @Html.Label("Correct answer") </td>
                <td> @Html.TextBoxFor(model => model.correctAnswerNum) </td>
            </tr>
            <tr>
                <td> @Html.LabelFor(model => model.solution) </td>
                <td> @Html.TextBoxFor(model => model.solution) </td>
            </tr>
            <tr>
                <td> @Html.LabelFor(model => model.hint) </td>
                <td> @Html.TextBoxFor(model => model.hint) </td>
            </tr>
            @*  <tr>
            <td>  Insert number of Images URL </td>
            <td>  <input id="imageUrlBoxId" value="0" type="text" onkeyup="textBoxEvent('imageUrlBoxId','imagesTdId',imageBaseId)" /> </td>
           
        </tr>
        <tr>
            <td></td>
            <td id="imagesTdId"></td>
        </tr>
        <tr>
            <td>  Insert number of Videos URL </td>
            <td>  <input id="videoUrlBoxId" value="0" type="text" onkeyup="textBoxEvent('videoUrlBoxId','videoTdId',videoBaseId)" /> </td>
           
        </tr>
        *@
            <tr>
                <td></td>
                <td id="videoTdId"></td>
            </tr>
        </table>
            
    
           
       
    
    
    
    
        <input type="submit" id="submitButton" value="Add new question" onclick="submitEvent('answersNumberId','imageUrlBoxId','videoUrlBoxId')" />
    
   
    
   
    
    
        <script type="text/javascript">
        /*remove submit button if there are no data and print message*/
            if (Model.length == 0) {
                var message = "No subjects exists";
                document.getElementById("submitButton").style.display = 'none';
                document.getElementById(mainDivName).innerHTML = message;
            }
        </script>
        <script type="text/javascript">
            addExistSubject(mainDivName, [], null);
        </script>
    
    }
</div>